<template>
  <el-dialog :title="`应用 - ${applicationOption.title}`"
             width="3.5rem"
             custom-class="global-dialog"
             :visible="dialogVisible"
             @open="dialogOpen" @close="dialogClose"
             :close-on-click-modal="false">
    <div class="application-detail" v-if="applicationOption.type === 3">
      <p class="application-detail-title">{{ detailOption.title }}</p>
      <p class="application-detail-text">状态：{{ detailOption.status | statusFilter($store.state.taskStatus) }}</p>
      <p class="application-detail-text">执行数：{{ detailOption.finish }}/{{ detailOption.total }}</p>
      <p class="application-detail-text">并发数：{{ detailOption.concurrency }}</p>
      <p class="application-detail-text">已执行时间：{{ detailOption.runTime | runTimeFilter }}</p>
    </div>
    <div class="application-detail" v-else>
      <p class="application-detail-title">{{ detailOption.processName }}</p>
      <p class="application-detail-text">状态：{{ detailOption.status | statusFilter($store.state.loginStatus) }}</p>
    </div>
    <div slot="footer" class="dialog-footer center">
      <template v-if="applicationOption.type === 3">
        <el-button type="success" v-if="detailOption.status === 1">运行</el-button>
        <el-button type="success" v-if="detailOption.status === 4">重新运行</el-button>
        <el-button type="warning" v-if="detailOption.status === 2">结束</el-button>
        <el-button type="primary" v-if="detailOption.status !== 2">导入</el-button>
        <el-button type="primary" v-if="detailOption.status === 4">导出</el-button>
      </template>
      <template v-else>
        <el-button type="success" v-if="detailOption.status === 1">登录</el-button>
      </template>
    </div>
  </el-dialog>
</template>

<script>
export default {
  name: 'ApplicationDetail',
  props: {
    applicationOption: {
      type: Object,
      default () {
        return {}
      }
    }
  },
  data () {
    return {
      detailOption: {}
    }
  },
  computed: {
    dialogVisible () {
      return this.$store.getters.applicationDetailVisible;
    }
  },
  filters: {
    statusFilter (val, dictionary) {
      return val === undefined ? '' : dictionary.filter(item => item.value === val)[0].label;
    },
    runTimeFilter (val) {
      let h, m, s;
      if (val > 60) {
        m = Math.floor(val / 60);
        s = val % 60;
      } else {
        s = val;
      }
      if (m > 60) {
        h = Math.floor(m / 60);
        m = m % 60;
      }
      return `${h !== undefined ? h + '小时' : ''}${m !== undefined ? m + '分' : ''}${s !== undefined ? s + '秒' : ''}`;
    }
  },
  methods: {
    /* @event 弹窗打开 */
    dialogOpen () {
      this.detailRequest();
    },
    /* @event 弹窗关闭 */
    dialogClose () {
      this.$store.commit('setApplicationDetail', false);
    },
    /* @method 获取详情 */
    detailRequest () {
      const data = new URLSearchParams();
      data.append('id', this.applicationOption.dataId);
      const url = this.applicationOption.type === 3 ? 'task' : 'process';
      this.$axios.post(`/${url}/detail`, data, s => {
        this.detailOption = s.data;
      });
    }
  }
}
</script>
