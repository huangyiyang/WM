<template>
  <section class="login">
    <div class="login-box clear-both">
      <el-image class="login-logo"
                src="../../static/image/pic.png">
        <div slot="error"
             class="image-error">
          <i class="el-icon-picture-outline"></i>
        </div>
      </el-image>
      <div class="login-info">
        <p class="login-info-title">欢迎登录</p>
        <p class="login-info-sup">WISEMOTION应用平台</p>
        <el-form class="login-info-form"
                 ref="form"
                 :model="form"
                 :rules="rules">
          <el-form-item prop="username">
            <el-input v-model="form.username"
                      autocomplete="off"
                      name="username"
                      placeholder="用户名"
                      @keyup.enter.native="onLogin"></el-input>
          </el-form-item>
          <el-form-item prop="password">
            <el-input v-model="form.password"
                      type="password"
                      autocomplete="new-password"
                      name="password"
                      placeholder="密码"
                      @keyup.enter.native="onLogin"></el-input>
          </el-form-item>
          <el-form-item>
            <el-checkbox v-model="form.isRemember"
                         id="remember"
                         label="记住用户名密码"
                         @keyup.enter.native="onLogin"></el-checkbox>
          </el-form-item>
          <el-form-item>
            <el-button type="primary"
                       size="medium"
                       round
                       @click="onLogin">登录</el-button>
          </el-form-item>
          <!-- <el-form-item class="login-footer">
            没有账号？<router-link tag="span" to="/register" class="blue">立即注册</router-link>
          </el-form-item> -->
        </el-form>
      </div>
    </div>
  </section>
</template>

<script>
export default {
  name: 'login',
  data () {
    return {
      form: {
        username: '',
        password: '',
        isRemember: false
      },
      rules: {
        username: [
          { required: true, message: '请输入用户名', trigger: 'blur' }
        ],
        password: [
          { required: true, message: '请输入密码', trigger: 'blur' },
          { min: 4, message: '长度至少 4 个字符', trigger: 'blur' }
        ]
      }
    }
  },
  computed: {
    integrationMode: function () {
      let { MENU: mode } = this.baseConfig
      return mode
    }
  },
  methods: {
    onLogin () {
      this.$refs['form'].validate((valid) => {
        if (valid) {
          let data = new URLSearchParams();
          data.append('username', this.form.username);
          data.append('password', this.form.password);
          this.$axios.post('/login', data, s => {
            this.$setCookie({
              data: {
                userName: this.form.username,
                passWord: this.form.password,
                isRemember: this.form.isRemember
              },
              isSave: true,
              name: 'duty_name',
              time: 14
            });
            this.$store.commit('setToken', s.token);
            this.userInfo();
          });
        } else {
          return false;
        }
      });
    },
    async userInfo () {
      if (this.integrationMode === 'BI') {
        let [wisemotionInfo, mojiongInfo] = await Promise.all([
          this.wisemotionInfo(),
          this.mojiongInfo()
        ]);

        let { projectInfo, boardInfo } = await this.mojingList();
        mojiongInfo = Object.assign(mojiongInfo, { projectInfo, boardInfo });

        this.$store.commit('setUser', Object.assign(wisemotionInfo, { mojiongInfo }));
        this.$router.push('/console');
      } else {
        this.$axios.post('/user/info', '', s => {
          this.$store.commit('setUser', s.data);
          this.$router.push('/console');
        })
      }
    },
    wisemotionInfo () {
      return new Promise((resolve, reject) => {
        this.$axios.post('/user/info', '', s => {
          resolve(s.data)
        }, e => reject(e))
      })
    },
    mojiongInfo () {
      return new Promise((resolve, reject) => {
        this.$axios.get('/chart/toGY', '', s => {
          resolve(s.data)
        }, e => reject(e))
      })
    },
    async mojingList () {
      let projectInfo = await this.projectInfo();
      let { statusCode, data } = projectInfo;
      if (statusCode === 0) {
        let { data: projects } = data;
        let boardInfo = {};
        if (projects.length) {
          let [{ projectId }] = projects;
          boardInfo = await this.boardInfo(projectId);
        }

        return { projectInfo, boardInfo }
      }

      return { projectInfo }
    },
    projectInfo () {
      return new Promise((resolve, reject) => {
        this.$axios.get('/mojing/getProjects', '', s => {
          resolve(s)
        }, e => reject(e))
      })
    },
    boardInfo (projectId) {
      return new Promise((resolve, reject) => {
        this.$axios.get('/mojing/getBoards?pId=' + projectId, '', s => {
          resolve(s)
        }, e => reject(e))
      })
    }
  },
  mounted: function () {
    this.$nextTick(() => {
      this.$setCookie({
        form: this.form,
        data: {
          userName: 'username',
          passWord: 'password',
          isRemember: 'isRemember'
        },
        isSave: false,
        name: 'duty_name'
      });
    });
  }
}
</script>
